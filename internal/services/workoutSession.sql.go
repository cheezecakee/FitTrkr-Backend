// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workoutSession.sql

package services

import (
	"context"

	"github.com/google/uuid"
)

const completeExerciseSession = `-- name: CompleteExerciseSession :one
UPDATE exercise_session
SET ended_at = NOW()
WHERE id = $1
RETURNING id
`

func (q *Queries) CompleteExerciseSession(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, completeExerciseSession, id)
	err := row.Scan(&id)
	return id, err
}

const completeWorkoutSession = `-- name: CompleteWorkoutSession :one
UPDATE workout_session
SET ended_at = NOW()
WHERE id = $1
RETURNING id
`

func (q *Queries) CompleteWorkoutSession(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, completeWorkoutSession, id)
	err := row.Scan(&id)
	return id, err
}

const createExerciseSession = `-- name: CreateExerciseSession :one
INSERT INTO exercise_session (workout_session_id, workout_exercise_id, total_sets)
SELECT $1, $2, $3
RETURNING id
`

type CreateExerciseSessionParams struct {
	WorkoutSessionID  int32
	WorkoutExerciseID int32
	TotalSets         int32
}

func (q *Queries) CreateExerciseSession(ctx context.Context, arg CreateExerciseSessionParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createExerciseSession, arg.WorkoutSessionID, arg.WorkoutExerciseID, arg.TotalSets)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createWorkoutSession = `-- name: CreateWorkoutSession :one
INSERT INTO workout_session (user_id, workout_id, total_exercises, expires_at)
SELECT $1, $2, $3, NOW() + INTERVAL '6 hours'
RETURNING id
`

type CreateWorkoutSessionParams struct {
	UserID         uuid.UUID
	WorkoutID      int32
	TotalExercises int32
}

func (q *Queries) CreateWorkoutSession(ctx context.Context, arg CreateWorkoutSessionParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createWorkoutSession, arg.UserID, arg.WorkoutID, arg.TotalExercises)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getExerciseSession = `-- name: GetExerciseSession :one
SELECT id, workout_session_id, workout_exercise_id, total_sets, ended_at, created_at FROM exercise_session
WHERE workout_session_id = $1
`

func (q *Queries) GetExerciseSession(ctx context.Context, workoutSessionID int32) (ExerciseSession, error) {
	row := q.db.QueryRowContext(ctx, getExerciseSession, workoutSessionID)
	var i ExerciseSession
	err := row.Scan(
		&i.ID,
		&i.WorkoutSessionID,
		&i.WorkoutExerciseID,
		&i.TotalSets,
		&i.EndedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkoutSession = `-- name: GetWorkoutSession :one
SELECT id, user_id, workout_id, total_exercises, ended_at, created_at, expires_at FROM workout_session
WHERE user_id = $1 AND expires_at > NOW()
`

func (q *Queries) GetWorkoutSession(ctx context.Context, userID uuid.UUID) (WorkoutSession, error) {
	row := q.db.QueryRowContext(ctx, getWorkoutSession, userID)
	var i WorkoutSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkoutID,
		&i.TotalExercises,
		&i.EndedAt,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const stopExerciseSession = `-- name: StopExerciseSession :one
UPDATE exercise_session
SET ended_at = NOW()
WHERE id = $1
RETURNING id
`

func (q *Queries) StopExerciseSession(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, stopExerciseSession, id)
	err := row.Scan(&id)
	return id, err
}

const stopSession = `-- name: StopSession :one
BEGIN
`

type StopSessionRow struct {
}

func (q *Queries) StopSession(ctx context.Context) (StopSessionRow, error) {
	row := q.db.QueryRowContext(ctx, stopSession)
	var i StopSessionRow
	err := row.Scan()
	return i, err
}

const stopWorkoutSession = `-- name: StopWorkoutSession :one
UPDATE workout_session
SET ended_at = NOW()
WHERE id = $1
RETURNING id
`

func (q *Queries) StopWorkoutSession(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, stopWorkoutSession, id)
	err := row.Scan(&id)
	return id, err
}
