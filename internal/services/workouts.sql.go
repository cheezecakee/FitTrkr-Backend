// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workouts.sql

package services

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workouts (
    user_id, 
    name, 
    description, 
    created_at, 
    updated_at
)
VALUES (
    $1, -- user_id (Foreign key from users table)
    $2, -- name (Workout name)
    $3, -- description (Optional)
    NOW(), -- Set created_at to the current timestamp
    NOW() -- Set updated_at to the current timestamp
)
RETURNING id, user_id, name, description, created_at, updated_at
`

type CreateWorkoutParams struct {
	UserID      uuid.UUID
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout, arg.UserID, arg.Name, arg.Description)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWorkout = `-- name: DeleteWorkout :exec
DELETE FROM workouts WHERE id = $1
`

func (q *Queries) DeleteWorkout(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWorkout, id)
	return err
}

const editWorkout = `-- name: EditWorkout :one
UPDATE workouts
SET name = COALESCE($3, name),
    description = COALESCE($4, description),
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, name, description, created_at, updated_at
`

type EditWorkoutParams struct {
	ID          int32
	UserID      uuid.UUID
	Name        sql.NullString
	Description sql.NullString
}

func (q *Queries) EditWorkout(ctx context.Context, arg EditWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, editWorkout,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
	)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkout = `-- name: GetWorkout :many
SELECT id, user_id, name, description, created_at, updated_at FROM workouts
`

func (q *Queries) GetWorkout(ctx context.Context) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getWorkout)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkoutsByID = `-- name: GetWorkoutsByID :many
SELECT id, user_id, name, description, created_at, updated_at FROM workouts WHERE user_id = $1
`

func (q *Queries) GetWorkoutsByID(ctx context.Context, userID uuid.UUID) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutsByID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
