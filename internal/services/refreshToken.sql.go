// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refreshToken.sql

package services

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, user_id, expires_at, created_at, updated_at, revoked_at)
VALUES (
    $1,
    $2,
    $3,
    now(),
    now(),
    NULL
)
RETURNING token, created_at, updated_at, user_id, is_revoked, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM refresh_tokens WHERE user_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, userID)
	return err
}

const getLatestSessionByID = `-- name: GetLatestSessionByID :one
SELECT token, created_at, updated_at, user_id, is_revoked, expires_at, revoked_at FROM refresh_tokens WHERE user_id = $1 ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetLatestSessionByID(ctx context.Context, userID uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getLatestSessionByID, userID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT token, created_at, updated_at, user_id, is_revoked, expires_at, revoked_at FROM refresh_tokens WHERE token = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getSession, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const replaceRefreshToken = `-- name: ReplaceRefreshToken :one
WITH deleted AS (
    DELETE FROM refresh_tokens WHERE user_id = $1
)
INSERT INTO refresh_tokens (token, user_id, expires_at, created_at, updated_at, revoked_at)
VALUES ($2, $1, $3, now(), now(), NULL)
RETURNING token, created_at, updated_at, user_id, is_revoked, expires_at, revoked_at
`

type ReplaceRefreshTokenParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) ReplaceRefreshToken(ctx context.Context, arg ReplaceRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, replaceRefreshToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens SET is_revoked = true, revoked_at = now(), updated_at = now() WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
