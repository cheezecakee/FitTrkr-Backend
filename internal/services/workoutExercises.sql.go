// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workoutExercises.sql

package services

import (
	"context"
	"database/sql"
)

const createWorkoutExercise = `-- name: CreateWorkoutExercise :one
INSERT INTO workout_exercises (
    workout_id,
    exercise_id,
    sets,
    reps_min,
    reps_max,
    weight,
    interval,
    rest,
    name
)
VALUES (
    $1, -- workout_id
    $2, -- exercise_id
    $3, -- sets
    $4, -- reps_min
    $5, -- reps_max
    $6, -- weight
    $7, -- interval
    $8,  -- rest
    (SELECT name FROM exercises WHERE id = $2) -- Get name from exercise table
)
RETURNING id, workout_id, exercise_id, name, sets, reps_min, reps_max, weight, interval, rest, created_at, updated_at
`

type CreateWorkoutExerciseParams struct {
	WorkoutID  int32
	ExerciseID int32
	Sets       int32
	RepsMin    int32
	RepsMax    int32
	Weight     float64
	Interval   int32
	Rest       int32
}

func (q *Queries) CreateWorkoutExercise(ctx context.Context, arg CreateWorkoutExerciseParams) (WorkoutExercise, error) {
	row := q.db.QueryRowContext(ctx, createWorkoutExercise,
		arg.WorkoutID,
		arg.ExerciseID,
		arg.Sets,
		arg.RepsMin,
		arg.RepsMax,
		arg.Weight,
		arg.Interval,
		arg.Rest,
	)
	var i WorkoutExercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseID,
		&i.Name,
		&i.Sets,
		&i.RepsMin,
		&i.RepsMax,
		&i.Weight,
		&i.Interval,
		&i.Rest,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWorkoutExercise = `-- name: DeleteWorkoutExercise :exec
DELETE FROM workout_exercises WHERE id = $1
`

func (q *Queries) DeleteWorkoutExercise(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWorkoutExercise, id)
	return err
}

const editWorkoutExercise = `-- name: EditWorkoutExercise :one
UPDATE workout_exercises
SET sets = COALESCE($2, sets),
    reps_min = COALESCE($3, reps_min),
    reps_max = COALESCE($4, reps_max),
    weight = COALESCE($5, weight),
    interval = COALESCE($6, interval),
    rest = COALESCE($7, rest),
    updated_at = NOW()
WHERE id = $1
RETURNING id, workout_id, exercise_id, name, sets, reps_min, reps_max, weight, interval, rest, created_at, updated_at
`

type EditWorkoutExerciseParams struct {
	ID       int32
	Sets     sql.NullInt32
	RepsMin  sql.NullInt32
	RepsMax  sql.NullInt32
	Weight   sql.NullFloat64
	Interval sql.NullInt32
	Rest     sql.NullInt32
}

func (q *Queries) EditWorkoutExercise(ctx context.Context, arg EditWorkoutExerciseParams) (WorkoutExercise, error) {
	row := q.db.QueryRowContext(ctx, editWorkoutExercise,
		arg.ID,
		arg.Sets,
		arg.RepsMin,
		arg.RepsMax,
		arg.Weight,
		arg.Interval,
		arg.Rest,
	)
	var i WorkoutExercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseID,
		&i.Name,
		&i.Sets,
		&i.RepsMin,
		&i.RepsMax,
		&i.Weight,
		&i.Interval,
		&i.Rest,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTotalExercises = `-- name: GetTotalExercises :one
SELECT COUNT(*) FROM workout_exercises WHERE workout_id = $1
`

func (q *Queries) GetTotalExercises(ctx context.Context, workoutID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalExercises, workoutID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWorkoutExerciseByID = `-- name: GetWorkoutExerciseByID :one
SELECT we.id, we.workout_id, we.exercise_id, we.name, we.sets, we.reps_min, we.reps_max, we.weight, we.interval, we.rest, we.created_at, we.updated_at 
FROM workout_exercises we
WHERE we.id = $1 AND workout_id = (
    SELECT ws.workout_id 
    FROM workout_session ws 
    WHERE ws.ID = $2
)
`

type GetWorkoutExerciseByIDParams struct {
	ID   int32
	ID_2 int32
}

func (q *Queries) GetWorkoutExerciseByID(ctx context.Context, arg GetWorkoutExerciseByIDParams) (WorkoutExercise, error) {
	row := q.db.QueryRowContext(ctx, getWorkoutExerciseByID, arg.ID, arg.ID_2)
	var i WorkoutExercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseID,
		&i.Name,
		&i.Sets,
		&i.RepsMin,
		&i.RepsMax,
		&i.Weight,
		&i.Interval,
		&i.Rest,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkoutExercises = `-- name: GetWorkoutExercises :many
SELECT we.id, we.workout_id, we.exercise_id, we.name, we.sets, we.reps_min, we.reps_max, we.weight, we.interval, we.rest, we.created_at, we.updated_at 
FROM workout_exercises we
WHERE we.workout_id = (
    SELECT ws.workout_id
    FROM workout_session ws
    WHERE ws.ID = $1
)
`

func (q *Queries) GetWorkoutExercises(ctx context.Context, id int32) ([]WorkoutExercise, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutExercises, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkoutExercise
	for rows.Next() {
		var i WorkoutExercise
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutID,
			&i.ExerciseID,
			&i.Name,
			&i.Sets,
			&i.RepsMin,
			&i.RepsMax,
			&i.Weight,
			&i.Interval,
			&i.Rest,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkoutExercisesIDs = `-- name: GetWorkoutExercisesIDs :many
SELECT id FROM workout_exercises WHERE workout_id = $1
`

func (q *Queries) GetWorkoutExercisesIDs(ctx context.Context, workoutID int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutExercisesIDs, workoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
